buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.

def libVersion      = "1"
def majorVersion    = "1"
def minorVersion    = "0"
//bugpatch or testing versions
def flowersVersion  = "a"
def oresVersion     = "c"
def farmVersion     = "a"
def industryVersion = "b"
def prePend = "1.10.2-"
def packageVersion  = libVersion+"."+majorVersion+"."+minorVersion+flowersVersion+oresVersion+farmVersion+industryVersion

flowersVersion = libVersion+"."+majorVersion+"."+minorVersion+flowersVersion
oresVersion = libVersion+"."+majorVersion+"."+minorVersion+oresVersion
farmVersion = libVersion+"."+majorVersion+"."+minorVersion+farmVersion
industryVersion = libVersion+"."+majorVersion+"."+minorVersion+industryVersion

version = ""
group= "com.draco18s.harderores" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = prePend+"HardStuff"+packageVersion

sourceCompatibility = targetCompatibility = "1.6" // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = "1.6"
}

minecraft {
    version = "1.10.2-12.18.2.2124"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20160518"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
	replace "{@version:lib}":libVersion,"{@version:ore}":oresVersion,"{@version:farm}":farmVersion,"{@version:ind}":industryVersion,"{@version:flowers}":flowersVersion,"required-after:hardlib":("required-after:hardlib@["+libVersion+",]"),"/*{uncomment}":"","{uncomment}*/":""
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // the 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    //provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // the deobf configurations:  'deobfCompile' and 'deobfProvided' are the same as the normal compile and provided,
    // except that these dependencies get remapped to your current MCP mappings
    //deobfCompile 'com.mod-buildcraft:buildcraft:6.0.8:dev'
    //deobfProvided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task coreJarNoCog(type: Jar) {
    baseName = prePend+'HardLib-v'+libVersion

    from('etc/lib') {
        include '*.info'
        expand 'version': libVersion, 'mcversion': project.minecraft.version
	}

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        exclude 'com/draco18s/ores/**', 'com/draco18s/industry/**', 'com/draco18s/farming/**', 'mcmod.info', 'TODO.txt', 'assets/**', 'cog_config/**', 'config/**', 'CustomOreGen/**','com/draco18s/flowers/**'
    }
}

task oresJar(type: Jar) {
    baseName = prePend+'HarderOres-'+oresVersion

    from('etc/ores') {
        include '*.info'
        expand 'version': oresVersion, 'mcversion': project.minecraft.version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'com/draco18s/ores/**', 'assets/harderores/**', 'cog_config/**'
		exclude 'cog_config/UndergroundHazards.xml','**.xcf'
    }
}

task industryJar(type: Jar) {
    baseName = prePend+'ExpandedIndustry-'+industryVersion

    from('etc/industry') {
        include '*.info'
        expand 'version': industryVersion, 'mcversion': project.minecraft.version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'com/draco18s/industry/**', 'assets/expindustry/**'
		exclude '**.xcf'
    }
}

task farmingJar(type: Jar) {
    baseName = prePend+'Harderfarming-'+farmVersion

    from('etc/farming') {
        include '*.info'
        expand 'version': farmVersion, 'mcversion': project.minecraft.version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'com/draco18s/farming/**', 'assets/harderfarming/**'
		exclude '**.xcf'
    }
}

task flowersJar(type: Jar) {
    baseName = prePend+'OreFlowers-'+flowersVersion

    from('etc/flowers') {
        include '*.info'
        expand 'version': '4.0.1', 'mcversion': project.minecraft.version
    }

    from zipTree(jar.outputs.getFiles().getSingleFile()).matching {
        include 'com/draco18s/flowers/**', 'assets/oreflowers/**'
		exclude '**.xcf'
    }
}

coreJarNoCog.dependsOn('reobfJar')
oresJar.dependsOn('reobfJar')
farmingJar.dependsOn('reobfJar')
industryJar.dependsOn('reobfJar')
flowersJar.dependsOn('reobfJar')

oresJar.dependsOn('flowersJar')

task releaseJars(type: Copy) {
    from coreJarNoCog
	from flowersJar
    from oresJar
    from farmingJar
    from industryJar
    //one of these lines crashes it?
    rename '-(.*)jar', '.jar'
    rename '-(.*)zip', '.zip'
    into '.'
}

task fullBuild(type: Delete) {
    delete jar
}

fullBuild.dependsOn('releaseJars')